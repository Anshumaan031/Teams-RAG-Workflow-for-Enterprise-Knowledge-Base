{
  "name": "Teams RAG with Memory Workflow",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "teams-webhook",
        "responseMode": "responseNode",
        "options": {}
      },
      "id": "webhook-teams",
      "name": "Teams Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [240, 300],
      "webhookId": "teams-webhook-id"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "condition-1",
              "leftValue": "={{ $json.type }}",
              "rightValue": "message",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "filter-messages",
      "name": "Filter Messages Only",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [460, 300]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT conversation_history FROM user_conversations WHERE user_id = $1 AND channel_id = $2 ORDER BY created_at DESC LIMIT 1",
        "additionalFields": {
          "queryParameters": "={{ [$json.from.id, $json.channelData.teamsChannelId] }}"
        }
      },
      "id": "get-conversation-history",
      "name": "Get Conversation History",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.4,
      "position": [680, 200],
      "credentials": {
        "postgres": {
          "id": "postgres-credentials",
          "name": "PostgreSQL Credentials"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Extract message details from Teams webhook\nconst teamsData = $input.first().json;\n\n// Parse conversation history from database\nlet conversationHistory = [];\nif ($input.all().length > 1 && $input.all()[1].json.conversation_history) {\n  conversationHistory = JSON.parse($input.all()[1].json.conversation_history);\n}\n\n// Prepare the payload for FastAPI RAG endpoint\nconst ragPayload = {\n  query: teamsData.text,\n  user_id: teamsData.from.id,\n  conversation_history: conversationHistory,\n  metadata: {\n    channel_id: teamsData.channelData.teamsChannelId,\n    message_id: teamsData.id,\n    timestamp: teamsData.timestamp,\n    user_name: teamsData.from.name\n  }\n};\n\n// Also prepare data for storing back to conversation memory\nconst contextData = {\n  user_id: teamsData.from.id,\n  channel_id: teamsData.channelData.teamsChannelId,\n  user_message: teamsData.text,\n  timestamp: new Date().toISOString(),\n  teams_message_id: teamsData.id,\n  conversation_history: conversationHistory\n};\n\nreturn {\n  rag_payload: ragPayload,\n  context_data: contextData,\n  teams_data: teamsData\n};"
      },
      "id": "prepare-rag-request",
      "name": "Prepare RAG Request",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [900, 300]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://localhost:8000/query",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": []
        },
        "jsonBody": "={{ $json.rag_payload }}",
        "options": {
          "timeout": 30000
        }
      },
      "id": "call-fastapi-rag",
      "name": "Call FastAPI RAG",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [1120, 300]
    },
    {
      "parameters": {
        "jsCode": "// Get the RAG response and context data\nconst ragResponse = $input.first().json;\nconst contextData = $input.first().json.context_data;\n\n// Update conversation history with the new exchange\nlet updatedHistory = contextData.conversation_history || [];\n\n// Add the new user message and AI response\nupdatedHistory.push({\n  role: 'user',\n  content: contextData.user_message,\n  timestamp: contextData.timestamp\n});\n\nupdatedHistory.push({\n  role: 'assistant', \n  content: ragResponse.response || ragResponse.answer,\n  timestamp: new Date().toISOString(),\n  sources: ragResponse.sources || []\n});\n\n// Keep only last 10 exchanges (20 messages) to manage memory size\nif (updatedHistory.length > 20) {\n  updatedHistory = updatedHistory.slice(-20);\n}\n\n// Prepare data for database update\nconst dbUpdateData = {\n  user_id: contextData.user_id,\n  channel_id: contextData.channel_id,\n  conversation_history: JSON.stringify(updatedHistory),\n  last_message_at: new Date().toISOString(),\n  rag_response: ragResponse.response || ragResponse.answer\n};\n\n// Prepare Teams response\nconst teamsResponse = {\n  type: 'message',\n  text: ragResponse.response || ragResponse.answer,\n  attachments: ragResponse.sources ? [{\n    contentType: 'application/vnd.microsoft.card.adaptive',\n    content: {\n      type: 'AdaptiveCard',\n      version: '1.2',\n      body: [\n        {\n          type: 'TextBlock',\n          text: 'Sources:',\n          weight: 'Bolder',\n          size: 'Small'\n        },\n        {\n          type: 'TextBlock', \n          text: ragResponse.sources.map(s => `• ${s}`).join('\\n'),\n          wrap: true,\n          size: 'Small'\n        }\n      ]\n    }\n  }] : []\n};\n\nreturn {\n  db_update: dbUpdateData,\n  teams_response: teamsResponse,\n  rag_data: ragResponse\n};"
      },
      "id": "process-rag-response",
      "name": "Process RAG Response",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1340, 300]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "INSERT INTO user_conversations (user_id, channel_id, conversation_history, last_message_at, created_at) VALUES ($1, $2, $3, $4, NOW()) ON CONFLICT (user_id, channel_id) DO UPDATE SET conversation_history = $3, last_message_at = $4, updated_at = NOW()",
        "additionalFields": {
          "queryParameters": "={{ [$json.db_update.user_id, $json.db_update.channel_id, $json.db_update.conversation_history, $json.db_update.last_message_at] }}"
        }
      },
      "id": "update-conversation-memory",
      "name": "Update Conversation Memory",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.4,
      "position": [1560, 200],
      "credentials": {
        "postgres": {
          "id": "postgres-credentials",
          "name": "PostgreSQL Credentials"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "={{ $node['Teams Webhook'].json.serviceUrl }}/v3/conversations/{{ $node['Teams Webhook'].json.conversation.id }}/activities",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "Bearer {{ $credentials.microsoftTeams.accessToken }}"
            },
            {
              "name": "Content-Type", 
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "jsonBody": "={{ $json.teams_response }}",
        "options": {
          "timeout": 10000
        }
      },
      "id": "send-teams-response",
      "name": "Send Teams Response",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [1780, 300],
      "credentials": {
        "microsoftTeams": {
          "id": "teams-credentials",
          "name": "Microsoft Teams Credentials"
        }
      }
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ { \"status\": \"success\", \"message\": \"Response sent to Teams\" } }}"
      },
      "id": "webhook-response",
      "name": "Webhook Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [2000, 300]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ { \"status\": \"ignored\", \"message\": \"Not a message event\" } }}"
      },
      "id": "webhook-response-ignore",
      "name": "Webhook Response (Ignore)",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [680, 400]
    },
    {
      "parameters": {
        "jsCode": "// Error handling for failed RAG API calls\nconst error = $input.first().json;\nconst contextData = $input.first().json.context_data;\n\n// Log error details\nconsole.error('RAG API Error:', error);\n\n// Prepare fallback response\nconst fallbackResponse = {\n  type: 'message',\n  text: '⚠️ Sorry, I encountered an issue processing your request. Please try again later.',\n  attachments: []\n};\n\nreturn {\n  teams_response: fallbackResponse,\n  error_details: error\n};"
      },
      "id": "handle-rag-error",
      "name": "Handle RAG Error",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1120, 500]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "={{ $node['Teams Webhook'].json.serviceUrl }}/v3/conversations/{{ $node['Teams Webhook'].json.conversation.id }}/activities",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "Bearer {{ $credentials.microsoftTeams.accessToken }}"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "jsonBody": "={{ $json.teams_response }}",
        "options": {
          "timeout": 10000
        }
      },
      "id": "send-error-response",
      "name": "Send Error Response",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [1340, 500],
      "credentials": {
        "microsoftTeams": {
          "id": "teams-credentials",
          "name": "Microsoft Teams Credentials"
        }
      }
    }
  ],
  "connections": {
    "Teams Webhook": {
      "main": [
        [
          {
            "node": "Filter Messages Only",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Filter Messages Only": {
      "main": [
        [
          {
            "node": "Get Conversation History",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Webhook Response (Ignore)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Conversation History": {
      "main": [
        [
          {
            "node": "Prepare RAG Request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare RAG Request": {
      "main": [
        [
          {
            "node": "Call FastAPI RAG",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Call FastAPI RAG": {
      "main": [
        [
          {
            "node": "Process RAG Response",
            "type": "main",
            "index": 0
          }
        ]
      ],
      "error": [
        [
          {
            "node": "Handle RAG Error",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process RAG Response": {
      "main": [
        [
          {
            "node": "Update Conversation Memory",
            "type": "main",
            "index": 0
          },
          {
            "node": "Send Teams Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Send Teams Response": {
      "main": [
        [
          {
            "node": "Webhook Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Handle RAG Error": {
      "main": [
        [
          {
            "node": "Send Error Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Send Error Response": {
      "main": [
        [
          {
            "node": "Webhook Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "tags": [],
  "triggerCount": 1,
  "updatedAt": "2024-01-01T00:00:00.000Z",
  "versionId": "1"
}